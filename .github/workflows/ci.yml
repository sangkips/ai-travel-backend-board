name: CI Pipeline

on:
  pull_request:
    branches:
    - develop
    types: [ opened, synchronize, reopened ]

jobs:
  lint-typecheck-test-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: travel
          POSTGRES_PASSWORD: travel
          POSTGRES_DB: travel
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      valkey:
        image: valkey/valkey:7.2-alpine
        ports:
        - 6379:6379
        options: >-
          --health-cmd "valkey-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -r requirements.txt

    - name: Run ruff (lint and format check)
      run: uv run ruff check . && uv run ruff format .

    - name: Run pyright
      run: uv run pyright

    - name: Run pytest
      env:
        DATABASE_URL: postgresql+asyncpg://travel:travel@localhost:5432/travel
        VALKEY_URL: redis://localhost:6379/0
      run: uv run pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: false
        tags: ai-travel-backend:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move Docker cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
